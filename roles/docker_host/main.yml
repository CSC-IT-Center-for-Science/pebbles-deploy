---
- name: Prepare docker host VM
  hosts: docker_host
  sudo: yes
  tasks:
    - name: add docker repo key
      apt_key: keyserver=keyserver.ubuntu.com id=36A1D7869245C8950F966E92D8576A8BA88D21E9

    - name: add docker repo
      apt_repository: repo='deb https://get.docker.com/ubuntu docker main' state=present

    - name: Install packages
      apt: name={{ item }} state=present
      with_items:
        - lxc-docker
        - python-pip
        - dstat
        - tmux
        - git
        - build-essential
        - python-dev

    - name: Install docker-py from pip (required by ansible, not available for Trusty as apt package, fixed version due to recent backward incompatible upgrade)
      pip: name=docker-py version=1.1.0

    - name: Install packages from pip
      pip: name={{ item }}
      with_items:
        - ansible

    - name: Add cloud-user to docker group and create ssh key
      user:
        name=cloud-user
        append=yes
        groups=docker
        generate_ssh_key=yes

    - name: Create application root directory
      file: path={{ docker_host_app_root }} owner=cloud-user state=directory


- name: Bring containers up
  hosts: docker_host
  vars:
    image_name: ubuntu_with_ssh
  tasks:

    - name: make temporary directory for image build
      command: mktemp -d
      register: mktemp

    - name: prepare docker image source (templates)
      template:
        src=templates/docker/{{ item }}.j2
        dest={{mktemp.stdout}}/{{ item }}
      with_items:
        - ansible-sudo
        - Dockerfile
        - supervisord.conf

    - name: prepare docker image source (public key)
      copy: src=~/.ssh/id_rsa.pub dest={{ mktemp.stdout }}/id_rsa.pub

    - name: check or build image
      docker_image: path={{ mktemp.stdout }} name={{ image_name }} state=present

    - name: remove temp image build directory
      file: name={{ mktemp.stdout }} state=absent

    - name: Bring up container for www
      docker:
        hostname: www
        image: "{{ image_name }}"
        state: running
        restart_policy: always
        name: www
        expose:
          - 22
          - 80
          - 443
          - 6379
        ports:
          - "2222:22"
          - "{{ docker_http_port }}:80"
          - "{{ docker_https_port }}:443"
        volumes:
          - "{{ docker_host_app_root }}:/shared_folder/source:ro"

    - name: add www to inventory
      add_host:
        name=www
        groups=docker,www
        ansible_ssh_host=localhost
        ansible_ssh_port=2222
        ansible_ssh_user=ansible
      ## see https://github.com/ansible/ansible-modules-core/issues/1005
      # when: item.Config.Hostname == "www" and item.State.Running == True
      # with_items: docker_containers

    - name: Bring up container for worker
      docker:
        hostname: worker
        image: "{{ image_name }}"
        state: running
        restart_policy: always
        name: worker
        expose:
          - 22
        ports:
          - "2223:22"
        links:
          - "www:www"
        volumes:
          - "{{ docker_host_app_root }}:/shared_folder/source:ro"
          - "{{ docker_host_m2m_credentials_dir }}:{{ application_m2m_credentials_dir }}:ro"

    - name: add worker to inventory
      add_host:
        name=worker
        groups=docker,worker
        ansible_ssh_host=localhost
        ansible_ssh_port=2223
        ansible_ssh_user=ansible
      ## see https://github.com/ansible/ansible-modules-core/issues/1005
      # when: item.config.hostname == "worker" and item.state.running == True
      # with_items: docker_containers

    - name: "Wait a bit for sshd to come up"
      pause: seconds=5

- name: Add cloud-user to containers
  hosts:
    - www
    - worker
  sudo: yes
  tasks:
    - name: Add cloud-user
      user: name=cloud-user comment="cloud admin user" state=present password='*' shell='/bin/bash'

    - name: Add passwordless sudo-rights to cloud-admin
      lineinfile:
        dest=/etc/sudoers
        state=present
        line='cloud-user ALL=(ALL) NOPASSWD:ALL'
        validate='visudo -cf %s'

    - name: Add cloud-user public key
      authorized_key: user=cloud-user key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
