- name: Add docker repo key (Ubuntu)
  apt_key: keyserver=keyserver.ubuntu.com id=36A1D7869245C8950F966E92D8576A8BA88D21E9
  when: ansible_lsb.id=="Ubuntu"

- name: Add docker repo (Ubuntu)
  apt_repository: repo='deb https://get.docker.com/ubuntu docker main' state=present
  when: ansible_lsb.id=="Ubuntu"

- name: Install packages (Ubuntu)
  apt: name={{ item }} state=present
  with_items:
    - lxc-docker
    - python-pip
    - dstat
    - tmux
    - git
    - build-essential
    - python-dev
    - sysstat
    - iptables
    - iptables-persistent
  when: ansible_lsb.id=="Ubuntu"

- name: Install packages (CentOS)
  yum: name={{ item }} state=present
  with_items:
    - docker
    - dstat
    - lsof
    - bash-completion
    - time
    - tmux
    - git
    - python-devel
    - openssl-devel
    - python-pip
    - sysstat
    - iptables-services
  when: ansible_lsb.id=="CentOS"

- name: Enable iptables service (CentOS)
  service: name=iptables state=started enabled=yes
  when: ansible_lsb.id=="CentOS"

- name: Upload custom docker configuration (CentOS)
  template:
    src=etc/sysconfig/{{ item }}.j2
    dest=/etc/sysconfig/{{ item }}
    backup=True
  with_items:
    - docker-network
    - docker-storage-setup
  notify: restart docker
  when: ansible_lsb.id=="CentOS"

- name: Upload custom docker configuration (Ubuntu)
  template:
    src=etc/default/{{ item }}.j2
    dest=/etc/default/{{ item }}
    backup=True
  with_items:
    - docker
  notify: restart docker
  when: ansible_lsb.id=="Ubuntu"

- name: Enable Docker service
  service: name=docker state=started enabled=yes

- name: >
        Install docker-py from pip (required by ansible,
        versioning is iffy. Also 2.0 is called docker in PyPI)
  pip: name=docker-py version=1.7.1.

- name: Install ansible from pip
  pip: name=ansible version=2.2.1.0

- name: create docker group
  group:
    name: docker
    state: present
  become: True

- name: Add cloud-user to docker group and create ssh key
  user:
    name=cloud-user
    append=yes
    groups=docker
    generate_ssh_key=yes

- name: Create application root directory
  file: path={{ docker_host_app_root }} owner=cloud-user state=directory

- name: Create docker image directory
  file: path={{ docker_host_image_dir }} owner=cloud-user state=directory

- name: set iptables state file (CentOS)
  set_fact: iptables_state_file="/etc/sysconfig/iptables"
  when: ansible_lsb.id=="CentOS"

- name: set iptables state file (Ubuntu)
  set_fact: iptables_state_file="/etc/iptables/rules.v4"
  when: ansible_lsb.id=="Ubuntu"

- name: Iptables rules to block access to the host from containers
  template:
    src=etc/sysconfig/iptables.j2
    dest={{ iptables_state_file }}
    backup=True
  notify:
    - restart iptables
    - restart iptables-persistent

# @OlliT is this the correct way to enable a repo in CentOS or is there a
# simpler way?

- name: enable OpenStack kilo repo
  copy:
    mode: 0744
    dest: /etc/yum.repos.d/
    src: CentOS-OpenStack-kilo.repo
  become: true

- name: add OpenStack kilo repo sign key
  copy:
    mode: 0744
    dest: /etc/pki/rpm-gpg/
    src: RPM-GPG-KEY-CentOS-SIG-Cloud
  become: true

- include: mount_devices.yml

- name: create backup script dir
  file:
    dest: ~cloud-user/backup_scripts/
    state: directory
  become: true
  become_user: cloud-user

- name: add backup script to dir
  copy:
    dest: ~cloud-user/backup_scripts/backup.sh
    src: backup.sh
    owner: cloud-user
    mode: 0744

