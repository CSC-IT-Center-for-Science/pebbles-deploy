- name: create docker group
  group:
    name: docker
    state: present
  become: True

- name: add ansible user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  become: True

- name: install yum packages
  yum:
    state: installed
    name:
      - centos-release-openstack
      - bind-utils
      - git
      - python-devel
      - python-setuptools
      - python-novaclient
      - libffi-devel
      - openssl-devel
  become: True

- name: check out project using git
  git:
    repo: "{{ git_repository }}"
    version: "{{ git_version }}"
    dest: "{{ docker_host_app_root }}"
  become: false

#for some reason the root dir belongs to root anyway
- name: make sure cloud-user owns git
  file:
    setype: svirt_sandbox_file_t
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory
    recurse: true
    path: "{{ docker_host_app_root }}"


# not 100% sure why easy_install and not yum but it's how it was so let's keep
# it
- name: easy_install latest pip
  easy_install:
    name: pip
    state: latest
  become: True

- name: pip install ansible (fixed version)
  pip:
    version: "{{ ansible_version.full }}"
    name: ansible
    state: present
  become: True


# move over credentials file from localhost, where it should be
- name: ensure in-memory filesystem
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
    recurse: yes
  become: True
  with_items:
    - "{{ application_m2m_credentials_dir }}"
    - /run/shm/
    - /run/


# we could check that local file exists but lack of m2m creds is an error at
# the time of this writing

- name: copy local creds to remote virtual filesystem
  copy:
    src: "{{ local_m2m_credentials_path }}"
    dest: "{{ application_m2m_credentials_path }}"
    owner: root
    group: root
    setype: svirt_sandbox_file_t
    mode: 0644
  become: True


- name: Create ssl dir
  file:
    dest: "{{ docker_host_cert_dir }}"
    owner: root
    group: root
    mode: 0600
    state: directory

- name: check if local key exists
  local_action: stat path="{(local_ssl_key}}"
  register: stat_local_ssl_key
  become: false

- name: check if local certificate exists
  local_action: stat path="{(local_ssl_cert}}"
  register: stat_local_ssl_cert
  become: false

- name: Create self-signed SSL cert
  command: >
    openssl req -new -nodes -x509
    -subj "/C=FI/ST=SouthernFinland/L=Helsinki/O=IT/CN={{ domain_name }}"
    -days 3650
    -extensions v3_ca
    -keyout {{ docker_host_cert_dir }}/server.key
    -out {{ docker_host_cert_dir }}/server.crt
    creates={{ docker_host_cert_dir }}/server.crt
  register: self_signed_cert
  when: stat_local_ssl_key.stat.exists == False or stat_local_ssl_cert.stat.exists == False

- name: Use self-signed SSL cert as a dummy file for chain
  command: cp {{ docker_host_cert_dir }}/server.crt {{ docker_host_cert_dir }}/chain.crt
  when: self_signed_cert is defined and self_signed_cert | changed

- name: Upload fixed certificate
  command:
    file:
      path: "{{ docker_host_cert_dir }}/chain.crt"
      src: "{{ local_ssl_crt }}"
  when: stat_local_ssl_key.stat.exists == True and  stat_local_ssl_cert.stat.exists == True

- name: Upload fixed key
  command:
    file:
      path: "{{ docker_host_cert_dir }}/server.key"
      src: "{{ local_ssl_key }}"
  when: stat_local_ssl_key.stat.exists == True and  stat_local_ssl_cert.stat.exists == True



- name: create SSO directory
  file:
    dest: "{{ sso_cert_path }}"
  when: use_sso == True

- name: upload SSO files
  file:
      dest: "{{ sso_cert_path }}/{{item}}"
      src: "{{ sso_cert_local_path }}/{{item}}"
  with_items:
    - sp_key.pem
    - sp_cert.pem
    - idp_cert.pem
  when: use_sso == True


- name: make temporary directory for image build
  command: mktemp -d
  register: mktemp

- name: prepare docker image source (templates)
  template:
    src: "docker/{{ item }}.j2"
    dest: "{{mktemp.stdout}}/{{ item }}"
  with_items:
    - ansible-sudo
    - Dockerfile
    - supervisord.conf

- name: prepare docker image source (public key)
  copy: src=~/.ssh/id_rsa.pub dest={{ mktemp.stdout }}/id_rsa.pub

- name: check or build image
  docker_image: path={{ mktemp.stdout }} name={{ image_name }} state=present docker_host=unix:///var/run/docker.sock

- name: remove temp image build directory
  file: name={{ mktemp.stdout }} state=absent

- name: Allow access to mounted host directories (CentOS)
  file:
    path: "{{ item }}"
    state: directory
    setype: svirt_sandbox_file_t
    recurse: yes
  with_items:
    - "{{ docker_host_app_root }}"
    - "{{ docker_host_image_dir }}"
    - "{{ docker_host_cert_dir }}"
    - "{{ docker_host_m2m_credentials_dir }}"
  when: ansible_lsb.id=="CentOS"

# Avoid docker 1.8.2 with ansible 1.9.x pull bug
# see https://github.com/ansible/ansible-modules-core/issues/2043
- name: Pull images
  command: docker pull {{ item }}
  with_items:
    - "{{ docker_image_redis }}"
    - "{{ docker_image_postgres }}"

- name: Bring up container for db
  docker:
    name: db
    image: "{{ docker_image_postgres }}"
    state: running
    restart_policy: always
    env:
      POSTGRES_USER: "{{ application_database_user }}"
      POSTGRES_PASSWORD: "{{ application_database_password }}"

- name: Bring up container for redis
  docker:
    name: redis
    image: "{{ docker_image_redis }}"
    state: running
    restart_policy: always

- name: Bring up container for api
  docker:
    hostname: api
    image: "{{ image_name }}"
    state: running
    restart_policy: always
    name: api
    expose:
      - 22
      - "{{Â gunicorn_bind_port }}"
      - "{{ gunicorn_bind_port_worker }}"
    ports:
      - "2222:22"
    links:
      - "db:db"
      - "redis:redis"
    volumes:
      - "{{ docker_host_app_root }}:/shared_folder/source:ro"
      - "{{ provisioning_log_file_root }}"

- name: add api to inventory
  add_host:
    name: api
    groups: docker,api
    ansible_ssh_host: "{{ ansible_host }}"
    ansible_ssh_port: 2222
    ansible_ssh_user: ansible
  ## see https://github.com/ansible/ansible-modules-core/issues/1005
  # when: item.Config.Hostname == "www" and item.State.Running == True
  # with_items: docker_containers


- name: Bring up container for sso
  docker:
    hostname: sso
    image: "{{ image_name }}"
    state: running
    restart_policy: always
    name: sso
    expose:
      - 80
    ports:
      - "2225:22"
    links:
      - "api:api"
    volumes:
      - "{{ docker_host_sso_dir }}:/etc/{{ application_name }}/sso:ro"
  when: "{{ enable_shibboleth | bool }}"

- name: add sso to inventory
  add_host:
    name: sso
    groups: docker,sso
    ansible_ssh_host: "{{ ansible_host }}"
    ansible_ssh_port: 2225
    ansible_ssh_user: ansible
  when: "{{ enable_shibboleth | bool }}"

- name: define frontend links
  set_fact:
    frontend_links: "['api:api', 'redis:redis']"
  when: "{{ not enable_shibboleth | bool }}"

- name: define frontend links (shibboleth enabled)
  set_fact:
    frontend_links: "['api:api', 'redis:redis', 'sso:sso']"
  when: "{{ enable_shibboleth | bool }}"

- name: Bring up container for frontend
  docker:
    hostname: frontend
    image: "{{ image_name }}"
    state: running
    restart_policy: always
    name: frontend
    expose:
      - 22
      - 80
      - "{{ application_external_https_port }}"
    ports:
      - "2224:22"
      - "80:80"
      - "{{ application_external_https_port }}:{{ application_external_https_port }}"
    links: "{{ frontend_links }}"
    volumes:
      - "{{ docker_host_cert_dir }}:/etc/nginx/ssl:ro"
    volumes_from:
      - api:ro

- name: add frontend to inventory
  add_host:
    name: frontend
    groups: docker,frontend
    ansible_ssh_host: "{{ ansible_host }}"
    ansible_ssh_port: 2224
    ansible_ssh_user: ansible


- name: Bring up container for worker
  docker:
    hostname: worker
    image: "{{ image_name }}"
    state: running
    restart_policy: always
    name: worker
    expose:
      - 22
    ports:
      - "2223:22"
    links:
      - "api:api"
      - "redis:redis"
    volumes:
      - "{{ docker_host_app_root }}:/shared_folder/source:ro"
      - "{{ docker_host_m2m_credentials_dir }}:{{ application_m2m_credentials_dir }}:ro"
      - "{{ docker_host_image_dir }}:/images:ro"

- name: add worker to inventory
  add_host:
    name: worker
    groups: docker,worker
    ansible_ssh_host: "{{ ansible_host }}"
    ansible_ssh_port: 2223
    ansible_ssh_user: ansible
  ## see https://github.com/ansible/ansible-modules-core/issues/1005
  # when: item.config.hostname == "worker" and item.state.running == True
  # with_items: docker_containers

- name: "Wait a bit for sshd to come up"
  pause: seconds=5
